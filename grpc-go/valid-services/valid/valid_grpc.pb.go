// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: valid.proto

package valid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ValidServiceClient is the client API for ValidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidServiceClient interface {
	ValidEmail(ctx context.Context, in *StringData, opts ...grpc.CallOption) (*BoolValue, error)
}

type validServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidServiceClient(cc grpc.ClientConnInterface) ValidServiceClient {
	return &validServiceClient{cc}
}

func (c *validServiceClient) ValidEmail(ctx context.Context, in *StringData, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := c.cc.Invoke(ctx, "/valid.ValidService/ValidEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidServiceServer is the server API for ValidService service.
// All implementations must embed UnimplementedValidServiceServer
// for forward compatibility
type ValidServiceServer interface {
	ValidEmail(context.Context, *StringData) (*BoolValue, error)
	mustEmbedUnimplementedValidServiceServer()
}

// UnimplementedValidServiceServer must be embedded to have forward compatible implementations.
type UnimplementedValidServiceServer struct {
}

func (UnimplementedValidServiceServer) ValidEmail(context.Context, *StringData) (*BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidEmail not implemented")
}
func (UnimplementedValidServiceServer) mustEmbedUnimplementedValidServiceServer() {}

// UnsafeValidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidServiceServer will
// result in compilation errors.
type UnsafeValidServiceServer interface {
	mustEmbedUnimplementedValidServiceServer()
}

func RegisterValidServiceServer(s grpc.ServiceRegistrar, srv ValidServiceServer) {
	s.RegisterService(&ValidService_ServiceDesc, srv)
}

func _ValidService_ValidEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidServiceServer).ValidEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valid.ValidService/ValidEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidServiceServer).ValidEmail(ctx, req.(*StringData))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidService_ServiceDesc is the grpc.ServiceDesc for ValidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "valid.ValidService",
	HandlerType: (*ValidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidEmail",
			Handler:    _ValidService_ValidEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "valid.proto",
}
